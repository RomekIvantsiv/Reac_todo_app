{"version":3,"sources":["store/index.ts","store/selectors.ts","components/Footer/Footer.tsx","components/TodoInput/TodoInput.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["ActionType","initialState","todos","currentTodo","status","buttonDelete","setTodos","createAction","SET_TODOS","setStasus","STATUS_CHANGED","setDeleteButton","SHOW_DELETE_BUTTON","setCurrentTodo","SET_CURRENT_TODO","reducer","createReducer","builder","addCase","state","action","payload","store","configureStore","getTodosSelector","getTodosStatus","showDeleteButton","getCurrentTodo","Footer","useState","selected","setSelected","useSelector","clearButton","dispatch","useDispatch","todosLeft","allTodos","notCompletedTodos","filter","todo","completed","length","className","type","classNames","onClick","TodoInput","title","setTitle","onSubmit","event","preventDefault","newTodo","id","uuid","placeholder","value","onChange","target","TodoList","edit","setEdit","statusTodos","newTitle","setNewTitle","useEffect","data","localStorage","getItem","JSON","parse","setItem","stringify","statusOfClearButton","every","removeTodo","filteredTodos","result","map","htmlFor","filteredTodosByStatus","editing","checked","newTodos","changeTodoStatus","onDoubleClick","autoFocus","defaultValue","onKeyDown","key","newTitleTest","updatedTodos","editTitle","onBlur","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.155af5b2.chunk.js","sourcesContent":["import {\n  createAction,\n  configureStore,\n  createReducer,\n} from '@reduxjs/toolkit';\n\nimport { State, Todo } from '../react-app-env.d';\n\nexport const data = [];\n\nconst initialState: State = {\n  todos: data,\n  currentTodo: null,\n  status: 'all',\n  buttonDelete: false,\n};\n\nenum ActionType {\n  SET_TODOS = 'SET_TODOS',\n  STATUS_CHANGED = 'STATUS_CHANGED',\n  SHOW_DELETE_BUTTON = 'SHOW_DELETE_BUTTON',\n  SET_CURRENT_TODO = 'SET_CURRENT_TODO',\n}\n\nexport const setTodos = createAction<Todo[]>(ActionType.SET_TODOS);\nexport const setStasus = createAction<string>(ActionType.STATUS_CHANGED);\nexport const setDeleteButton = createAction<boolean>(ActionType.SHOW_DELETE_BUTTON);\nexport const setCurrentTodo = createAction<Todo | null>(ActionType.SET_CURRENT_TODO);\n\nconst reducer = createReducer(initialState, (builder) => {\n  builder.addCase(setTodos, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.todos = action.payload;\n  });\n  builder.addCase(setStasus, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.status = action.payload;\n  });\n  builder.addCase(setDeleteButton, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.buttonDelete = action.payload;\n  });\n  builder.addCase(setCurrentTodo, (state, action) => {\n    // eslint-disable-next-line no-param-reassign\n    state.currentTodo = action.payload;\n  });\n});\n\nexport const store = configureStore({ reducer });\n","import { State } from '../react-app-env.d';\n\nexport const getTodosSelector = (state: State) => state.todos;\nexport const getTodosStatus = (state: State) => state.status;\nexport const showDeleteButton = (state: State) => state.buttonDelete;\nexport const getCurrentTodo = (state: State) => state.currentTodo;\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../react-app-env.d';\nimport { setStasus, setTodos } from '../../store';\nimport { getTodosSelector, showDeleteButton } from '../../store/selectors';\n\nexport const Footer = () => {\n  const [selected, setSelected] = useState('all');\n  const todos = useSelector(getTodosSelector);\n  const clearButton = useSelector(showDeleteButton);\n  const dispatch = useDispatch();\n\n  const notCompletedTodos = (allTodos: Todo[]) => {\n    const notCompletedTodos = allTodos.filter(todo => todo.completed === false);\n\n    return notCompletedTodos.length;\n  };\n\n  const todosLeft = notCompletedTodos(todos);\n\n  return (\n    <footer className=\"footer\">\n      <span className=\"todo-count\">\n        {todosLeft\n          ? (`${todosLeft} items left`)\n          : ('Nothing to do :)')}\n\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <button\n            type=\"button\"\n            className={classNames('filters__button', { selected: selected === 'all' })}\n            onClick={() => {\n              setSelected('all');\n              dispatch(setStasus('all'));\n            }}\n          >\n            All\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={classNames('filters__button', { selected: selected === 'active' })}\n            onClick={() => {\n              setSelected('active');\n              dispatch(setStasus('active'));\n            }}\n          >\n            Active\n          </button>\n        </li>\n\n        <li>\n          <button\n            type=\"button\"\n            className={classNames('filters__button', { selected: selected === 'completed' })}\n            onClick={() => {\n              setSelected('completed');\n              dispatch(setStasus('completed'));\n            }}\n          >\n            Completed\n          </button>\n        </li>\n      </ul>\n\n      {clearButton\n      && (\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={() => {\n            dispatch(setTodos([]));\n          }}\n        >\n          Clear completed\n        </button>\n      )}\n\n    </footer>\n  );\n};\n","import React, { useState } from 'react';\nimport { v4 as uuid } from 'uuid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Todo } from '../../react-app-env.d';\nimport { setTodos } from '../../store';\nimport { getTodosSelector } from '../../store/selectors';\n\nexport const TodoInput = () => {\n  const [title, setTitle] = useState('');\n\n  const todos = useSelector(getTodosSelector);\n  const dispatch = useDispatch();\n\n  const handleFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    const id = uuid();\n    const newTodo: Todo = {\n      id,\n      title,\n      completed: false,\n    };\n\n    if (newTodo.title !== '') {\n      dispatch(setTodos([...todos, newTodo]));\n      setTitle('');\n    }\n  };\n\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <form\n        onSubmit={handleFormSubmit}\n      >\n        <input\n          type=\"text\"\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          value={title}\n          onChange={(event) => {\n            setTitle(event.target.value);\n          }}\n        />\n      </form>\n    </header>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  getCurrentTodo,\n  getTodosSelector,\n  getTodosStatus,\n} from '../../store/selectors';\nimport { setCurrentTodo, setDeleteButton, setTodos } from '../../store';\nimport { Todo } from '../../react-app-env.d';\n\nexport const TodoList = () => {\n  const [edit, setEdit] = useState('');\n  const dispatch = useDispatch();\n  const currentTodo = useSelector(getCurrentTodo);\n  const todos = useSelector(getTodosSelector);\n  const statusTodos = useSelector(getTodosStatus);\n  const [newTitle, setNewTitle] = useState(currentTodo?.title);\n\n  useEffect(() => {\n    const data = localStorage.getItem('todos');\n\n    if (data) {\n      dispatch(setTodos(JSON.parse(data)));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  useEffect(() => {\n    setNewTitle(currentTodo?.title);\n  }, [currentTodo]);\n\n  const statusOfClearButton = todos?.every(todo => todo.completed === true);\n\n  const setButtonDelete = (status: boolean) => {\n    if (status) {\n      dispatch(setDeleteButton(true));\n    } else if (!status) {\n      dispatch(setDeleteButton(false));\n    }\n  };\n\n  useEffect(() => {\n    setButtonDelete(statusOfClearButton);\n  }, [statusOfClearButton]);\n\n  const removeTodo = (id: string) => {\n    const filteredTodos = todos.filter(todo => todo.id !== id);\n\n    dispatch(setTodos(filteredTodos));\n  };\n\n  const changeTodoStatus = (id: string) => {\n    const newTodos = todos.map((todo: Todo) => {\n      if (todo.id === id) {\n        return { ...todo, completed: !todo.completed };\n      }\n\n      return todo;\n    });\n\n    dispatch(setTodos(newTodos));\n  };\n\n  const editTitle = (id: string, newTitleTest: string) => {\n    if (newTitleTest === '') {\n      removeTodo(id);\n\n      return null;\n    }\n\n    const newTodos = todos.filter(todo => todo.title !== '');\n\n    const updatedTodos = newTodos.map(todo => {\n      if (todo.id === id) {\n        return { ...todo, title: newTitleTest };\n      }\n\n      return todo;\n    });\n\n    dispatch(setTodos(updatedTodos));\n\n    return null;\n  };\n\n  const setAllCompleted = () => {\n    let result;\n    const status = todos.every(todo => todo.completed === true);\n\n    result = todos.map((todo: Todo) => {\n      return { ...todo, completed: true };\n    });\n\n    if (status) {\n      result = todos.map((todo: Todo) => {\n        return { ...todo, completed: false };\n      });\n    }\n\n    dispatch(setTodos(result));\n  };\n\n  const filteredTodosByStatus = (allTodos: Todo[]) => {\n    switch (statusTodos) {\n      case 'active': {\n        return allTodos.filter(todo => todo.completed === false);\n      }\n\n      case 'completed': {\n        return allTodos.filter(todo => todo.completed === true);\n      }\n\n      default: {\n        return allTodos;\n      }\n    }\n  };\n\n  return (\n    <section className=\"main\">\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onClick={setAllCompleted}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n      <ul className=\"todo-list\">\n        {filteredTodosByStatus(todos)?.map(todo => (\n          <li\n            key={todo.id}\n            className={classNames('', { completed: todo.completed, editing: todo.id === edit })}\n          >\n            <div className=\"view\">\n              <input\n                type=\"checkbox\"\n                className=\"toggle\"\n                checked={todo.completed}\n                id={todo.id}\n                onChange={() => {\n                  changeTodoStatus(todo.id);\n                }}\n              />\n              <label\n                onDoubleClick={() => {\n                  setEdit(todo.id);\n                  dispatch(setCurrentTodo(todo));\n                }}\n              >\n                {todo.title}\n              </label>\n              <button\n                type=\"button\"\n                className=\"destroy\"\n                onClick={() => {\n                  removeTodo(todo.id);\n                }}\n              />\n            </div>\n            {edit\n            && (\n              <input\n                // eslint-disable-next-line jsx-a11y/no-autofocus\n                autoFocus\n                type=\"text\"\n                className=\"edit\"\n                defaultValue={todo.title}\n                onChange={(event) => {\n                  setNewTitle(event.target.value);\n                }}\n                onKeyDown={(event) => {\n                  if (event.key === 'Escape') {\n                    setEdit('');\n                  }\n\n                  if (event.key === 'Enter') {\n                    editTitle(todo.id, newTitle || '');\n                    setEdit('');\n                  }\n                }}\n                onBlur={() => {\n                  setEdit('');\n                  setNewTitle('');\n                }}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </section>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Footer } from './components/Footer';\nimport { TodoInput } from './components/TodoInput';\nimport { TodoList } from './components/TodoList';\nimport { getTodosSelector } from './store/selectors';\nimport './styles/filters.scss';\nimport './styles/index.scss';\nimport './styles/todo-list.scss';\n\nexport const App: React.FC = () => {\n  const todos = useSelector(getTodosSelector);\n\n  return (\n    <section className=\"todoapp\">\n      <TodoInput />\n\n      <TodoList />\n      {todos?.length !== 0\n      && (\n        <Footer />\n      )}\n    </section>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { App } from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}